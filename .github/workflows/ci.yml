name: AI-IDS CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

jobs:
  test:
    runs-on: ubuntu-latest
    
    services:
      mysql:
        image: mysql:8.0
        env:
          MYSQL_ALLOW_EMPTY_PASSWORD: yes
          MYSQL_DATABASE: ai_ids_test
        ports:
          - 3306:3306
        options: --health-cmd="mysqladmin ping" --health-interval=10s --health-timeout=5s --health-retries=3

    steps:
    - uses: actions/checkout@v3

    - name: Setup PHP
      uses: shivammathur/setup-php@v2
      with:
        php-version: '8.2'
        extensions: mbstring, dom, fileinfo, mysql, gd

    - name: Setup Node.js
      uses: actions/setup-node@v3
      with:
        node-version: '18'
        cache: 'npm'

    - name: Setup Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.9'

    - name: Cache Composer dependencies
      uses: actions/cache@v3
      with:
        path: /tmp/composer-cache
        key: ${{ runner.os }}-${{ hashFiles('**/composer.lock') }}

    - name: Install PHP dependencies
      run: composer install --no-progress --prefer-dist --optimize-autoloader

    - name: Install Node.js dependencies
      run: npm ci

    - name: Install Python dependencies
      run: |
        cd ml_scripts
        pip install -r requirements.txt

    - name: Copy environment file
      run: cp .env.example .env

    - name: Generate application key
      run: php artisan key:generate

    - name: Build frontend assets
      run: npm run build

    - name: Run database migrations
      run: php artisan migrate --env=testing

    - name: Run PHP Code Style Check
      run: ./vendor/bin/pint --test

    - name: Run PHP Static Analysis
      run: ./vendor/bin/phpstan analyse

    - name: Run Unit Tests
      run: php artisan test --testsuite=Unit

    - name: Run Feature Tests
      run: php artisan test --testsuite=Feature

    - name: Run ML Model Tests
      run: |
        cd ml_scripts
        python -m pytest tests/ -v

    - name: Run Security Scan
      run: |
        composer audit
        npm audit

  deploy:
    needs: test
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    
    steps:
    - name: Deploy to Production
      run: echo "Deploy to production server"
      # Add actual deployment steps here
